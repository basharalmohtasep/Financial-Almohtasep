@model EmployeeTransactionDtoModel;
@using Financial_Almohtasep.Data;
@using Financial_Almohtasep.Models;
@{
    ViewData["Title"] = "Employee Transaction";
}

<h2>Transaction List</h2>
<a asp-controller="EmployeesTransaction" asp-action="Add" class="btn btn-success">Add Transaction</a>
<a asp-controller="Employee" asp-action="Index" class="btn btn-secondary">Cancel</a>
<form asp-action="View" method="post">
    <div>
        <div>
            <label for="employeeSelect">Select Employee</label>
            <select id="employeeSelect" name="SelectedEmployeeId">
                <option value="">Select Employee</option>
                @foreach (var Employee in Model.BaseIdNameModel)
                {
                    <option value="@Employee.Id">@Employee.Name</option>
                }
            </select>
            <div>
                <label for="startDate">Date Range</label>
                <input id="startDate" name="StartDate" type="date">
                to
                <input id="endDate" name="EndDate" type="date">
            </div>
            <button type="submit">Apply Filters</button>
        </div>
    </div>
</form>

<table class="table table-striped" id="transactionTable">
    <thead>
        <tr>
            <th>EmployeeName</th>
            <th>Transaction</th>
            <th>TransactionType</th>
            <th>Note</th>
            <th>TransactionDate</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var Transaction in Model.EmployeeTransaction)
        {
            var employee = Model.BaseIdNameModel.FirstOrDefault(e => e.Id == Transaction.EmployeeId);
            <tr>
                <td>@employee?.Name</td>
                <td>@Transaction.SalaryChange</td>
                <td>@Transaction.TransactionType</td>
                <td>@Transaction.Note</td>
                <td>@Transaction.TransactionDate</td>
                <td>
                    <a href="@Url.Action("Edit", "EmployeesTransaction", new { id = Transaction.Id })" class="btn btn-warning">Edit</a>
                    <form asp-action="DeleteTransaction" asp-controller="Employee" asp-route-id="@Transaction.Id" method="post" style="display:inline-block;">
                        <button type="submit" class="btn btn-danger">Delete</button>
                    </form>
                </td>
            </tr>
        }
    </tbody>
    <tfoot>
        <tr>
            <td colspan="1"><strong>Net Salary</strong></td>
            <td colspan="5">
                @Model.EmployeeTransaction.Sum(t => t.SalaryChange)
            </td>
        </tr>
    </tfoot>
</table>
<a id="downloadPdf" class="btn btn-warning">Download as PDF</a>
<a id="downloadExcel" class="btn btn-info">Download as Excel</a>


<script>
    document.addEventListener('DOMContentLoaded', function () {
        document.getElementById('downloadPdf').addEventListener('click', (event) => {
            event.preventDefault(); // Prevent the default link behavior

            const { jsPDF } = window.jspdf;
            const content = document.getElementById('transactionTable');

            if (content) { // Ensure the table exists
                html2canvas(content).then(canvas => {
                    const imgData = canvas.toDataURL('image/png');

                    const pdfWidth = 595;
                    const pdfHeight = 842;

                    const canvasRatio = canvas.width / canvas.height;
                    const a4Ratio = pdfWidth / pdfHeight;
                    let newCanvasWidth, newCanvasHeight;

                    if (canvasRatio > a4Ratio) {
                        newCanvasWidth = pdfWidth;
                        newCanvasHeight = pdfWidth / canvasRatio;
                    } else {
                        newCanvasWidth = pdfHeight * canvasRatio;
                        newCanvasHeight = pdfHeight;
                    }

                    const pdf = new jsPDF({
                        orientation: newCanvasWidth > newCanvasHeight ? 'landscape' : 'portrait',
                        unit: 'pt',
                        format: 'a4'
                    });

                    // Add title/header to PDF
                    pdf.setFontSize(18);
                    pdf.text('Employee Transaction List', pdfWidth / 2, 20, { align: 'center' });

                    const x = (pdfWidth - newCanvasWidth) / 2;
                    const y = 40;

                    pdf.addImage(imgData, 'PNG', x, y, newCanvasWidth, newCanvasHeight);
                    pdf.save('EmployeeTransactions.pdf');
                }).catch(err => {
                    console.error('Error generating PDF', err);
                });
            } else {
                console.error('Table element not found.');
            }
        });

        document.getElementById('downloadExcel').addEventListener('click', (event) => {
            event.preventDefault(); // Prevent the default link behavior

            const table = document.getElementById('transactionTable');

            if (table) { // Ensure the table exists
                // Convert HTML table to Excel
                const workbook = XLSX.utils.table_to_book(table, { sheet: "Employee Transactions" });
                XLSX.writeFile(workbook, 'EmployeeTransactions.xlsx');
            } else {
                console.error('Table element not found.');
            }
        });
    });
</script>
